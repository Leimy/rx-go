#+TITLE: Radio Xenu IRC/Twitter interfaces
#+DATE: [2015-04-26 Sun 11:07]

* Ideas for improvement

1. Separate bot, metadata and twitter into components
2. Communicate between components over Unix Domain Sockets with 9p
3. Administer whole grid via 9p/REST

** Twitter forwarder
Listens for requests to tweet, and does so.  Unix domain socket security.
Authenticates the same way metabot does today.  If it dies, just restart it, basically no state.

Failing to authenticate should restart with backoff.

** Metadata stream
This should provide a read-only and push-to-subscriber interface to the current song playing/metadata.
Instability in reading streams has been a problem in the past due to weird formatting in the metadata 
and a loosely defined standard for what's allowed.  We should be able to fix the stream ripper and 
restart whenever with no impact to anything else in the system.

Push can be done via inotify/kqueue (VNODE) to a file in a "write to temporary, sync, rename" fashion so we
never get half-metadata (writes are probably small enough it doesn't matter).

Alternatively clients can register themselves over Unix Domain Sockets (so we can determine when they hang up)
to receive notifications of metadata changes.

This has been the most fragile part running on my local machines in the past due to streaming issues with my ISP.
Clients will need to detect when they've been hung up on and attempt to reconnect in to the stream.  Alternatively
using the file interface they can remain disconnected and just watch the file.  

The file approach is most flexible in that we can replace metadata services however we want...

(Explore this more...)

** The Bot
The bot will do mostly what it's doing today, attempt to connect to IRC, sit in the channel and respond to requests
and commands.  The biggest change will be the way we extend the bot

*** Bot Extensibility
The bot is a client of the metadata service as well as the twitter forwarder, generically we can surround
commands with ?? like we're doing now, and forward all of those to a given namespace serving 9p. 

Re-thought the "some commands are internal" idea.  Now I think that we can pre-load these through
bot-extensibility via a 9p interface as well.

We can provide a script to pre-load these, but need a way to describe events

1. ?autotweet?  - tweet when metadata changes (metadata change event) (with timeout)
2. ?autolast? - announce in the channel when the metadata changes (metadata change event) (with timeout)
3. ?tweet? - tweet right now, regardless of autotweet settings.
4. ?lastsong? - announce the current song in the chat.

To implement these we need a way to describe "on metadata change" and "timeout" events.

We can add 9p scrtiptable behaviors as we move forward.



